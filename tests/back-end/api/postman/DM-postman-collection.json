{
	"info": {
		"_postman_id": "36449cb0-95df-4cbd-84a2-fb09bcf9f985",
		"name": "digital-marketplace-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Admin - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.get(pm.environment.get('api_url'), 'sid', function (error, value) {",
									"    pm.environment.set('admin_sid', value);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tokenUrl = `${pm.environment.get('kc_proto')}://${pm.environment.get('kc_url')}/auth/realms/${pm.environment.get('gov_realm_name')}/protocol/openid-connect/token`;",
									"let clientId = pm.environment.get('gov_client_id');",
									"let clientSecret = pm.environment.get('gov_client_secret');",
									"let username = pm.environment.get('test_admin_username');",
									"let password = pm.environment.get('test_admin_password');",
									"let scope = 'openid';",
									"",
									"function encode(obj) {",
									"    return Object.keys(obj).reduce((acc, cur) => {",
									"        return `${acc}${cur}=${obj[cur]}&`;",
									"    }, '');",
									"}",
									"",
									"",
									"let getTokenRequest = {",
									"    method: 'POST',",
									"    url: tokenUrl,",
									"    header: {",
									"        'Cache-Control': 'no-cache',",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: encode({",
									"            'grant_type': 'password',",
									"            'client_id': clientId,",
									"            'client_secret': clientSecret,",
									"            username,",
									"            password,",
									"            'scope': 'openid profile email'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    const token_set = response.json();",
									"",
									"    console.log({ err, token_set });",
									"",
									"    postman.setEnvironmentVariable(\"admin_token_set\", JSON.stringify(token_set));",
									"});",
									"",
									"const jar = pm.cookies.jar();",
									"jar.clear(pm.environment.get('api_url'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{admin_token_set}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/auth/service?token=foobar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"auth",
								"service"
							],
							"query": [
								{
									"key": "token",
									"value": "foobar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Get Current Session/Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"admin_user_id\", jsonData.user.id);",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"SReponse contains user data!\", function () {",
									"  pm.expect(jsonData.user.idpUsername).to.eql(pm.environment.get('test_admin_username'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/sessions/current",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"sessions",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gov - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.get(pm.environment.get('api_url'), 'sid', function (error, value) {",
									"    pm.environment.set('gov_sid', value);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tokenUrl = `${pm.environment.get('kc_proto')}://${pm.environment.get('kc_url')}/auth/realms/${pm.environment.get('gov_realm_name')}/protocol/openid-connect/token`;",
									"let clientId = pm.environment.get('gov_client_id');",
									"let clientSecret = pm.environment.get('gov_client_secret');",
									"let username = pm.environment.get('test_gov_username');",
									"let password = pm.environment.get('test_gov_password');",
									"let scope = 'openid';",
									"",
									"function encode(obj) {",
									"    return Object.keys(obj).reduce((acc, cur) => {",
									"        return `${acc}${cur}=${obj[cur]}&`;",
									"    }, '');",
									"}",
									"",
									"",
									"let getTokenRequest = {",
									"    method: 'POST',",
									"    url: tokenUrl,",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: encode({",
									"            'grant_type': 'password',",
									"            'client_id': clientId,",
									"            'client_secret': clientSecret,",
									"            username,",
									"            password,",
									"            'scope': 'openid'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    const token_set = response.json();",
									"",
									"    console.log({ err, token_set });",
									"",
									"    postman.setEnvironmentVariable(\"gov_token_set\", JSON.stringify(token_set));",
									"});",
									"",
									"const jar = pm.cookies.jar();",
									"jar.clear(pm.environment.get('api_url'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{gov_token_set}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/auth/service?token=foobar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"auth",
								"service"
							],
							"query": [
								{
									"key": "token",
									"value": "foobar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gov - Get Current Session/Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"console.log(jsonData)",
									"postman.setEnvironmentVariable(\"gov_user_id\", jsonData.user.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/sessions/current",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"sessions",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.get(pm.environment.get('api_url'), 'sid', function (error, value) {",
									"    pm.environment.set('vendor1_sid', value);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tokenUrl = `${pm.environment.get('kc_proto')}://${pm.environment.get('kc_url')}/auth/realms/${pm.environment.get('vendor_realm_name')}/protocol/openid-connect/token`;",
									"let clientId = pm.environment.get('vendor_client_id');",
									"let clientSecret = pm.environment.get('vendor_client_secret');",
									"let username = pm.environment.get('test_vendor1_username');",
									"let password = pm.environment.get('test_vendor1_password');",
									"let scope = 'openid';",
									"",
									"function encode(obj) {",
									"    return Object.keys(obj).reduce((acc, cur) => {",
									"        return `${acc}${cur}=${obj[cur]}&`;",
									"    }, '');",
									"}",
									"",
									"",
									"let getTokenRequest = {",
									"    method: 'POST',",
									"    url: tokenUrl,",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: encode({",
									"            'grant_type': 'password',",
									"            'client_id': clientId,",
									"            'client_secret': clientSecret,",
									"            username,",
									"            password,",
									"            'scope': 'openid'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    const token_set = response.json();",
									"",
									"    console.log({ err, token_set });",
									"",
									"    postman.setEnvironmentVariable(\"vendor_token_set\", JSON.stringify(token_set));",
									"});",
									"",
									"const jar = pm.cookies.jar();",
									"jar.clear(pm.environment.get('api_url'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{vendor_token_set}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/auth/service?token=foobar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"auth",
								"service"
							],
							"query": [
								{
									"key": "token",
									"value": "foobar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Get Current Session/Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"vendor1_user_id\", jsonData.user.id);",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "localhost:3000",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "meridian.local",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{api_url}}/api/sessions/current",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"sessions",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 2 - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.get(pm.environment.get('api_url'), 'sid', function (error, value) {",
									"    pm.environment.set('vendor2_sid', value);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tokenUrl = `${pm.environment.get('kc_proto')}://${pm.environment.get('kc_url')}/auth/realms/${pm.environment.get('vendor_realm_name')}/protocol/openid-connect/token`;",
									"let clientId = pm.environment.get('vendor_client_id');",
									"let clientSecret = pm.environment.get('vendor_client_secret');",
									"let username = pm.environment.get('test_vendor2_username');",
									"let password = pm.environment.get('test_vendor2_password');",
									"let scope = 'openid';",
									"",
									"function encode(obj) {",
									"    return Object.keys(obj).reduce((acc, cur) => {",
									"        return `${acc}${cur}=${obj[cur]}&`;",
									"    }, '');",
									"}",
									"",
									"",
									"let getTokenRequest = {",
									"    method: 'POST',",
									"    url: tokenUrl,",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: encode({",
									"            'grant_type': 'password',",
									"            'client_id': clientId,",
									"            'client_secret': clientSecret,",
									"            username,",
									"            password,",
									"            'scope': 'openid'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    const token_set = response.json();",
									"",
									"    console.log({ err, token_set });",
									"",
									"    postman.setEnvironmentVariable(\"vendor2_token_set\", JSON.stringify(token_set));",
									"});",
									"",
									"const jar = pm.cookies.jar();",
									"jar.clear(pm.environment.get('api_url'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{vendor2_token_set}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/auth/service?token=foobar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"auth",
								"service"
							],
							"query": [
								{
									"key": "token",
									"value": "foobar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gov - Get Current Session/Profile Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"vendor2_user_id\", jsonData.user.id);",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/sessions/current",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"sessions",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 3 - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.get(pm.environment.get('api_url'), 'sid', function (error, value) {",
									"    pm.environment.set('vendor3_sid', value);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tokenUrl = `${pm.environment.get('kc_proto')}://${pm.environment.get('kc_url')}/auth/realms/${pm.environment.get('vendor_realm_name')}/protocol/openid-connect/token`;",
									"let clientId = pm.environment.get('vendor_client_id');",
									"let clientSecret = pm.environment.get('vendor_client_secret');",
									"let username = pm.environment.get('test_vendor3_username');",
									"let password = pm.environment.get('test_vendor3_password');",
									"let scope = 'openid';",
									"",
									"function encode(obj) {",
									"    return Object.keys(obj).reduce((acc, cur) => {",
									"        return `${acc}${cur}=${obj[cur]}&`;",
									"    }, '');",
									"}",
									"",
									"",
									"let getTokenRequest = {",
									"    method: 'POST',",
									"    url: tokenUrl,",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: encode({",
									"            'grant_type': 'password',",
									"            'client_id': clientId,",
									"            'client_secret': clientSecret,",
									"            username,",
									"            password,",
									"            'scope': 'openid'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    const token_set = response.json();",
									"",
									"    console.log({ err, token_set });",
									"",
									"    postman.setEnvironmentVariable(\"vendor3_token_set\", JSON.stringify(token_set));",
									"});",
									"",
									"const jar = pm.cookies.jar();",
									"jar.clear(pm.environment.get('api_url'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{vendor3_token_set}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/auth/service?token=foobar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"auth",
								"service"
							],
							"query": [
								{
									"key": "token",
									"value": "foobar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 3 - Get Current Session/Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"vendor3_user_id\", jsonData.user.id);",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/sessions/current",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"sessions",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 4 - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.get(pm.environment.get('api_url'), 'sid', function (error, value) {",
									"    pm.environment.set('vendor4_sid', value);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tokenUrl = `${pm.environment.get('kc_proto')}://${pm.environment.get('kc_url')}/auth/realms/${pm.environment.get('vendor_realm_name')}/protocol/openid-connect/token`;",
									"let clientId = pm.environment.get('vendor_client_id');",
									"let clientSecret = pm.environment.get('vendor_client_secret');",
									"let username = pm.environment.get('test_vendor4_username');",
									"let password = pm.environment.get('test_vendor4_password');",
									"let scope = 'openid';",
									"",
									"function encode(obj) {",
									"    return Object.keys(obj).reduce((acc, cur) => {",
									"        return `${acc}${cur}=${obj[cur]}&`;",
									"    }, '');",
									"}",
									"",
									"",
									"let getTokenRequest = {",
									"    method: 'POST',",
									"    url: tokenUrl,",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: encode({",
									"            'grant_type': 'password',",
									"            'client_id': clientId,",
									"            'client_secret': clientSecret,",
									"            username,",
									"            password,",
									"            'scope': 'openid'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    const token_set = response.json();",
									"",
									"    console.log({ err, token_set });",
									"",
									"    postman.setEnvironmentVariable(\"vendor4_token_set\", JSON.stringify(token_set));",
									"});",
									"",
									"const jar = pm.cookies.jar();",
									"jar.clear(pm.environment.get('api_url'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{vendor4_token_set}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/auth/service?token=foobar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"auth",
								"service"
							],
							"query": [
								{
									"key": "token",
									"value": "foobar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 4 - Get Current Session/Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor4_sid'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"vendor4_user_id\", jsonData.user.id);",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/sessions/current",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"sessions",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Override Session (Vendor 1 -> Gov)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.get(pm.environment.get('api_url'), 'sid', function (error, value) {",
									"    pm.environment.set('gov_sid', value);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/auth/override-session/gov/usagop01/?token=foobar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"auth",
								"override-session",
								"gov",
								"usagop01",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "foobar"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "File Operations",
			"item": [
				{
					"name": "Vendor 1 - Create File (Public / Any)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"file_id\", jsonData.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "ferret",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "[{\"tag\": \"any\"}]",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "{{uploaded_file_path}}"
								}
							]
						},
						"url": {
							"raw": "{{api_url}}/api/files",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 2 - Read Public File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/files/{{file_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"files",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Create File (For Vendor 2 User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"file_id\", jsonData.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "ferret",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "[{\"tag\": \"user\", \"value\": \"{{vendor2_user_id}}\"}]",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "{{uploaded_file_path}}"
								}
							]
						},
						"url": {
							"raw": "{{api_url}}/api/files",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 2 - Read Private File (Should Succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/files/{{file_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"files",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 3 - Read Private File (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/files/{{file_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"files",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Create File (For Gov User Type)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"file_id\", jsonData.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "ferret",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "[{\"tag\": \"userType\", \"value\": \"GOV\"}]",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "{{uploaded_file_path}}"
								}
							]
						},
						"url": {
							"raw": "{{api_url}}/api/files",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 2 - Read Gov-Only File (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/files/{{file_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"files",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gov - Read Gov-Only File (Should Succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/files/{{file_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"files",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor - Read Gov-Only File (Should Succeed as Owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/files/{{file_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"files",
								"{{file_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "CWU Opportunity / Proposals - Happy Path",
			"item": [
				{
					"name": "Create & Publish Opportunity (GOV)",
					"item": [
						{
							"name": "Admin - Create Private File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"postman.setEnvironmentVariable(\"file2_id\", jsonData.id)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "turtle.jpg",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "[{\"tag\": \"user\", \"value\": \"{{admin_user_id}}\"}]",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "yGpErkexn/Lettre-Motivation UQAR.pdf"
										}
									]
								},
								"url": {
									"raw": "{{api_url}}/api/files",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Create CWU Opportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"postman.setEnvironmentVariable(\"cwu_opp_id\", jsonData.id)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Test CWU Opportunity\",\n    \"teaser\": \"Sample Teaser\",\n    \"remoteOk\": false,\n    \"location\": \"Victoria\",\n    \"reward\": 70000,\n    \"skills\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"description\": \"Sample Description Lorem Ipsum\",\n    \"proposalDeadline\": \"2021-02-15\",\n    \"assignmentDate\": \"2021-02-15\",\n    \"startDate\": \"2021-02-15\",\n    \"completionDate\": \"2021-02-20\",\n    \"submissionInfo\": \"github.com\",\n    \"acceptanceCriteria\": \"Sample Acceptance Criteria\",\n    \"evaluationCriteria\": \"Sample Evaluation Criteria\",\n    \"status\": \"DRAFT\",\n    \"attachments\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update CWU Opportunity (Edit Draft)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"edit\",\n    \"value\": {\n        \"title\": \"Test CWU Opportunity - Updated\",\n        \"teaser\": \"Sample Teaser\",\n        \"remoteOk\": true,\n        \"remoteDesc\": \"Need you here sort of\",\n        \"location\": \"Victoria\",\n        \"reward\": 70000,\n        \"skills\": [\n            \"foo\",\n            \"bar\"\n        ],\n        \"description\": \"Sample Description Lorem Ipsum\",\n        \"proposalDeadline\": \"2021-02-15\",\n        \"assignmentDate\": \"2021-02-15\",\n        \"startDate\": \"2021-02-15\",\n        \"completionDate\": \"2021-02-20\",\n        \"submissionInfo\": \"github.com\",\n        \"acceptanceCriteria\": \"Sample Acceptance Criteria\",\n        \"evaluationCriteria\": \"Sample Evaluation Criteria\",\n        \"status\": \"DRAFT\",\n        \"attachments\": [\n            \"{{file2_id}}\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Read CWU Opportunity Attachment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/files/{{file2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"files",
										"{{file2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update CWU Opportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"edit\",\n    \"value\": {\n        \"title\": \"Test CWU Opportunity - updated by admin!\",\n        \"teaser\": \"Sample Teaser\",\n        \"remoteOk\": false,\n        \"remoteDesc\": \"Need you here\",\n        \"location\": \"Victoria\",\n        \"reward\": 70000,\n        \"skills\": [\n            \"foo\",\n            \"bar\"\n        ],\n        \"description\": \"Sample Description Lorem Ipsum\",\n        \"proposalDeadline\": \"{{$isoTimestamp}}\",\n        \"assignmentDate\": \"{{$isoTimestamp}}\",\n        \"startDate\": \"{{$isoTimestamp}}\",\n        \"completionDate\": \"{{$isoTimestamp}}\",\n        \"submissionInfo\": \"github.com\",\n        \"acceptanceCriteria\": \"Sample Acceptance Criteria\",\n        \"evaluationCriteria\": \"Sample Evaluation Criteria\",\n        \"status\": \"DRAFT\",\n        \"attachments\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Publish CWU Opportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"publish\",\n    \"value\": \"Published\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update CWU Opportunity (Add Addendum)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"addAddendum\",\n    \"value\": \"My First Addendum\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get All Opportunities",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Create CWU Opportunity Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"postman.setEnvironmentVariable(\"cwu_opp_id\", jsonData.id)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Test CWU Opportunity\",\n    \"teaser\": \"Sample Teaser\",\n    \"remoteOk\": false,\n    \"location\": \"Victoria\",\n    \"reward\": 70000,\n    \"skills\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"description\": \"Sample Description Lorem Ipsum\",\n    \"proposalDeadline\": \"2021-02-15\",\n    \"assignmentDate\": \"2021-02-15\",\n    \"startDate\": \"2021-02-15\",\n    \"completionDate\": \"2021-02-20\",\n    \"submissionInfo\": \"github.com\",\n    \"acceptanceCriteria\": \"Sample Acceptance Criteria\",\n    \"evaluationCriteria\": \"Sample Evaluation Criteria\",\n    \"status\": \"DRAFT\",\n    \"attachments\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Gov - Delete CWU Opportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "First Proposal (VENDOR)",
					"item": [
						{
							"name": "Gov - Create CWU Opportunity Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"postman.setEnvironmentVariable(\"cwu_opp_id\", jsonData.id)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Test CWU Opportunity\",\n    \"teaser\": \"Sample Teaser\",\n    \"remoteOk\": false,\n    \"location\": \"Victoria\",\n    \"reward\": 70000,\n    \"skills\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"description\": \"Sample Description Lorem Ipsum\",\n    \"proposalDeadline\": \"{{$isoTimestamp}}\",\n    \"assignmentDate\": \"{{$isoTimestamp}}\",\n    \"startDate\": \"{{$isoTimestamp}}\",\n    \"completionDate\": \"{{$isoTimestamp}}\",\n    \"submissionInfo\": \"github.com\",\n    \"acceptanceCriteria\": \"Sample Acceptance Criteria\",\n    \"evaluationCriteria\": \"Sample Evaluation Criteria\",\n    \"status\": \"PUBLISHED\",\n    \"attachments\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Get Current Session/Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"vendor1_user_id\", jsonData.user.id);",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Accept Terms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"acceptTerms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/users/{{vendor1_user_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"users",
										"{{vendor1_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Get Opportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Read Many Proposals on Opp (Check for Existing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"console.log(pm.environment.get('vendor1_sid'))",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/?opportunity={{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										""
									],
									"query": [
										{
											"key": "opportunity",
											"value": "{{cwu_opp_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Create CWU Proposal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"cwu_proposal1_id\", jsonData.id);",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"opportunity\": \"{{cwu_opp_id}}\",\n    \"proposalText\": \"You should hire me\",\n    \"additionalComments\": \"please\",\n    \"proponent\": {\n        \"tag\": \"individual\",\n        \"value\": {\n            \"legalName\": \"Andrew S\",\n            \"email\": \"foo@bar.com\",\n            \"phone\": \"222-222-2222\",\n            \"street1\": \"foo\",\n            \"city\": \"Saskatoon\",\n            \"region\": \"SK\",\n            \"mailCode\": \"V8Z1T8\",\n            \"country\": \"Canada\"\n        }\n    },\n    \"attachments\": [],\n    \"status\": \"DRAFT\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Edit CWU Proposal Draft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"edit\",\n    \"value\": {\n        \"proposalText\": \"You should hire me ASAP\",\n        \"additionalComments\": \"please\",\n        \"proponent\": {\n            \"tag\": \"individual\",\n            \"value\": {\n                \"legalName\": \"Andrew S\",\n                \"email\": \"foo@bar.com\",\n                \"phone\": \"222-222-2222\",\n                \"street1\": \"foo\",\n                \"city\": \"Saskatoon\",\n                \"region\": \"SK\",\n                \"mailCode\": \"V8Z1T8\",\n                \"country\": \"Canada\"\n            }\n        },\n        \"attachments\": [\n            \"{{file_id}}\",\n            \"{{file2_id}}\"\n        ],\n        \"status\": \"DRAFT\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Vendor 1 - Delete SWU Draft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Submit CWU Proposal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"submit\",\n    \"value\": \"Submitted\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Subscribe CWU Opportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"opportunity\": \"{{cwu_opp_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/subscribers/code-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"subscribers",
										"code-with-us"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Second Proposal (VENDOR)",
					"item": [
						{
							"name": "Vendor 2 - Get Current Session/Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"vendor2_user_id\", jsonData.user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 2 - Accept Terms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"acceptTerms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/users/{{vendor2_user_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"users",
										"{{vendor2_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 2 - Create CWU Proposal (Submit Immediately)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"cwu_proposal2_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"opportunity\": \"{{cwu_opp_id}}\",\n    \"proposalText\": \"You should pay me lots of $$$ to work for you.  Definitely.\",\n    \"additionalComments\": \"think about it\",\n    \"proponent\": {\n        \"tag\": \"individual\",\n        \"value\": {\n            \"legalName\": \"Andrew S\",\n            \"email\": \"foo@bar.com\",\n            \"street1\": \"foo\",\n            \"city\": \"Saskatoon\",\n            \"region\": \"SK\",\n            \"mailCode\": \"V8Z1T8\",\n            \"country\": \"Canada\"\n        }\n    },\n    \"attachments\": [],\n    \"status\": \"SUBMITTED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Vendor 2 - Withdraw CWU Proposal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"cwu_proposal2_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"withdraw\",\n    \"value\": \"Withdrawn.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal2_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Close and Evaluate Proposals (GOV)",
					"item": [
						{
							"name": "Gov - Get Opportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update CWU Opportunity (Change Closing Date)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"edit\",\n    \"value\": {\n        \"title\": \"Test CWU Opportunity - Updated\",\n        \"teaser\": \"Sample Teaser\",\n        \"remoteOk\": true,\n        \"remoteDesc\": \"Need you here sort of\",\n        \"location\": \"Victoria\",\n        \"reward\": 70000,\n        \"skills\": [\n            \"foo\",\n            \"bar\"\n        ],\n        \"description\": \"Sample Description Lorem Ipsum\",\n        \"proposalDeadline\": \"{{currentDate}}\",\n        \"assignmentDate\": \"2021-02-15\",\n        \"startDate\": \"2021-02-15\",\n        \"completionDate\": \"2021-02-20\",\n        \"submissionInfo\": \"github.com\",\n        \"acceptanceCriteria\": \"Sample Acceptance Criteria\",\n        \"evaluationCriteria\": \"Sample Evaluation Criteria\",\n        \"attachments\": [\n            \"{{file_id}}\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Opportunity (Trigger Hook)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Proposals For Opp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us?opportunity={{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us"
									],
									"query": [
										{
											"key": "opportunity",
											"value": "{{cwu_opp_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Score Proposal 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"score\",\n    \"value\": {\n        \"note\": \"Score of 88\",\n        \"score\": 88\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Score Proposal 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"score\",\n    \"value\": {\n        \"note\": \"Score of 79.5\",\n        \"score\": 79.5\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Gov - Batch score Proposals 1 & 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"saveProposalScores\",\n    \"value\": {\n        \"{{cwu_proposal1_id}}\": {\n            \"note\": \"Score of 65\",\n            \"score\": 65\n        },\n        \"{{cwu_proposal2_id}}\": {\n            \"note\": \"Score of 95.9\",\n            \"score\": 95.9\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Lock In Proposal Scores",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"lockProposalScores\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Proposals For Opp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us?opportunity={{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us"
									],
									"query": [
										{
											"key": "opportunity",
											"value": "{{cwu_opp_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Award Proposal 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"award\",\n    \"value\": \"Awarded\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Gov - Award Proposal 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"award\",\n    \"value\": \"Awarded\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Gov - Disqualify Proposal 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"disqualify\",\n    \"value\": \"Disqualified for self-identification.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Gov - Cancel Opportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"cancel\",\n    \"value\": \"Opportunity cancelled.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/code-with-us/{{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"code-with-us",
										"{{cwu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Proposals For Opp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us?opportunity={{cwu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us"
									],
									"query": [
										{
											"key": "opportunity",
											"value": "{{cwu_opp_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Proposal 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update CWU Proposal 1 - Add Note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"addNote\",\n    \"value\": {\n        \"note\": \"This is a sample note with attachments\",\n        \"attachments\": [\"{{file_id}}\", \"{{file2_id}}\"]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Get Proposal 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 2 - Get Proposal 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal2_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var moment = require(\"moment\");",
							"postman.setGlobalVariable(\"currentDate\", moment().subtract(1, 'days').toISOString());"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SWU Opportunity / Proposals - Happy Path",
			"item": [
				{
					"name": "Create & Submit Opportunity (GOV)",
					"item": [
						{
							"name": "Admin - Create Private File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"postman.setEnvironmentVariable(\"file_id\", jsonData.id)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "ferret",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "[{\"tag\": \"user\", \"value\": \"{{admin_user_id}}\"}]",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "{{uploaded_file_path}}"
										}
									]
								},
								"url": {
									"raw": "{{api_url}}/api/files",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Create Public File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"postman.setEnvironmentVariable(\"public_file_id\", jsonData.id)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "ferret2",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "[{\"tag\": \"any\"}]",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "{{uploaded_file_path}}"
										}
									]
								},
								"url": {
									"raw": "{{api_url}}/api/files",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Create SWU Opportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"postman.setEnvironmentVariable(\"swu_opp_id\", jsonData.id)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"SWU via POSTMAN\",\n    \"teaser\": \"Sample Teaser\",\n    \"remoteOk\": false,\n    \"remoteDesc\": \"Need you here\",\n    \"location\": \"Victoria\",\n    \"totalMaxBudget\": 500000,\n    \"minTeamMembers\": 2,\n    \"mandatorySkills\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"optionalSkills\": \"yam\",\n    \"description\": \"Sample Description Lorem Ipsum\",\n    \"proposalDeadline\": \"2021-02-15\",\n    \"assignmentDate\": \"2021-02-15\",\n    \"questionsWeight\": 20,\n    \"codeChallengeWeight\": 20,\n    \"scenarioWeight\": 40,\n    \"priceWeight\": 20,\n    \"status\": \"DRAFT\",\n    \"prototypePhase\": {\n    \t\"startDate\": \"2021-02-28\",\n    \t\"maxBudget\": 200000,\n    \t\"requiredCapabilities\": [\n    \t\t{\n    \t\t\t\"capability\": \"Agile Coaching\",\n    \t\t\t\"fullTime\": false\n    \t\t}\n    \t]\n    },\n    \"implementationPhase\": {\n        \"startDate\": \"2021-03-11\",\n        \"maxBudget\": 500000,\n        \"requiredCapabilities\": [\n            {\n                \"capability\": \"Agile Coaching\",\n                \"fullTime\": false\n            }\n        ]\n    },\n    \"teamQuestions\": [\n        {\n            \"question\": \"foo\",\n            \"guideline\": \"bar\",\n            \"score\": 5,\n            \"wordLimit\": 300,\n            \"order\": 1\n        }\n    ],\n    \"attachments\": [\"{{file_id}}\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Admin - Create SWU Opportunity (Publish Immediately)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"postman.setEnvironmentVariable(\"swu_opp_id\", jsonData.id)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"SWU via POSTMAN\",\n    \"teaser\": \"Sample Teaser\",\n    \"remoteOk\": false,\n    \"remoteDesc\": \"Need you here\",\n    \"location\": \"Victoria\",\n    \"totalMaxBudget\": 5,\n    \"minTeamMembers\": 2,\n    \"mandatorySkills\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"optionalSkills\": \"yam\",\n    \"description\": \"Sample Description Lorem Ipsum\",\n    \"proposalDeadline\": \"2021-02-15\",\n    \"assignmentDate\": \"2021-02-15\",\n    \"questionsWeight\": 20,\n    \"codeChallengeWeight\": 20,\n    \"scenarioWeight\": 40,\n    \"priceWeight\": 20,\n    \"status\": \"PUBLISHED\",\n    \"prototypePhase\": {\n    \t\"startDate\": \"2021-02-28\",\n    \t\"completionDate\": \"2021-03-01\",\n    \t\"maxBudget\": 200000,\n    \t\"requiredCapabilities\": [\n    \t\t{\n    \t\t\t\"capability\": \"Agile Coaching\",\n    \t\t\t\"fullTime\": false\n    \t\t}\n    \t]\n    },\n    \"implementationPhase\": {\n        \"startDate\": \"2021-03-11\",\n        \"completionDate\": \"2021-03-20\",\n        \"maxBudget\": 500000,\n        \"requiredCapabilities\": [\n            {\n                \"capability\": \"Agile Coaching\",\n                \"fullTime\": false\n            }\n        ]\n    },\n    \"teamQuestions\": [\n        {\n            \"question\": \"foo\",\n            \"guideline\": \"bar\",\n            \"score\": 5,\n            \"wordLimit\": 300,\n            \"order\": 1\n        }\n    ],\n    \"attachments\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Update SWU Opportunity (Edit Draft)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"edit\",\n    \"value\": {\n        \"title\": \"SWU via POSTMAN - UPDATED\",\n        \"teaser\": \"Sample Teaser\",\n        \"remoteOk\": false,\n        \"remoteDesc\": \"Need you here\",\n        \"location\": \"Victoria\",\n        \"totalMaxBudget\": 1000000,\n        \"mandatorySkills\": [\n            \"foo\",\n            \"bar\"\n        ],\n        \"optionalSkills\": \"yam\",\n        \"description\": \"Sample Description Lorem Ipsum\",\n        \"proposalDeadline\": \"2021-02-15\",\n        \"assignmentDate\": \"2021-02-15\",\n        \"questionsWeight\": 20,\n        \"codeChallengeWeight\": 20,\n        \"scenarioWeight\": 40,\n        \"priceWeight\": 20,\n        \"prototypePhase\": {\n            \"startDate\": \"2021-02-28\",\n            \"completionDate\": \"2021-03-01\",\n            \"maxBudget\": 200000,\n            \"requiredCapabilities\": [\n                {\n                    \"capability\": \"Agile Coaching\",\n                    \"fullTime\": false\n                }\n            ]\n        },\n        \"implementationPhase\": {\n            \"startDate\": \"2021-03-11\",\n            \"completionDate\": \"2021-03-20\",\n            \"maxBudget\": 500000,\n            \"requiredCapabilities\": [\n                {\n                    \"capability\": \"Agile Coaching\",\n                    \"fullTime\": false\n                }\n            ]\n        },\n        \"teamQuestions\": [\n            {\n                \"question\": \"foo\",\n                \"guideline\": \"bar\",\n                \"score\": 5,\n                \"wordLimit\": 300,\n                \"order\": 1\n            }\n        ],\n        \"attachments\": [\n            \"{{file_id}}\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Read SWU Opportunity Attachment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/files/{{file_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"files",
										"{{file_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Submit SWU Opportunity for Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"submitForReview\",\n    \"value\": \"Submitted\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Gov Owner - Delete Opportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Admin - Delete SWU Opportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Publish & Edit Opportunity (ADMIN)",
					"item": [
						{
							"name": "Admin - Publish SWU Opportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"publish\",\n    \"value\": \"Published\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Update SWU Opportunity (Edit Published)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"edit\",\n    \"value\": {\n        \"title\": \"SWU via POSTMAN\",\n        \"teaser\": \"Updated Sample Teaser - Edit After Publish\",\n        \"remoteOk\": true,\n        \"remoteDesc\": \"Stay back\",\n        \"location\": \"Victoria\",\n        \"totalMaxBudget\": 1000000,\n        \"minTeamMembers\": 3,\n        \"mandatorySkills\": [\n            \"foo\",\n            \"bar\"\n        ],\n        \"optionalSkills\": \"yam\",\n        \"description\": \"Sample Description Lorem Ipsum\",\n        \"proposalDeadline\": \"2021-02-15\",\n        \"assignmentDate\": \"2021-02-15\",\n        \"questionsWeight\": 20,\n        \"codeChallengeWeight\": 20,\n        \"scenarioWeight\": 40,\n        \"priceWeight\": 20,\n        \"prototypePhase\": {\n            \"startDate\": \"2021-02-28\",\n            \"completionDate\": \"2021-03-01\",\n            \"maxBudget\": 200000,\n            \"requiredCapabilities\": [\n                {\n                    \"capability\": \"Agile Coaching\",\n                    \"fullTime\": false\n                }\n            ]\n        },\n        \"implementationPhase\": {\n            \"startDate\": \"2021-03-02\",\n            \"completionDate\": \"2021-03-05\",\n            \"maxBudget\": 500000,\n            \"requiredCapabilities\": [\n                {\n                    \"capability\": \"Agile Coaching\",\n                    \"fullTime\": false\n                }\n            ]\n        },\n        \"teamQuestions\": [\n            {\n                \"question\": \"foo\",\n                \"guideline\": \"bar\",\n                \"score\": 5,\n                \"wordLimit\": 300,\n                \"order\": 1\n            }\n        ],\n        \"attachments\": [\n            \"{{file_id}}\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Add Addendum SWU Opportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"addAddendum\",\n    \"value\": \"Sample Addendum 1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Update SWU Opportunity - Add Note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"addNote\",\n    \"value\": {\n        \"note\": \"This is a sample note with attachments\",\n        \"attachments\": [\"{{file_id}}\", \"{{file2_id}}\"]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Admin - Suspend Opportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"suspend\",\n    \"value\": \"Suspended.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Get Opportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "First Proposal (VENDOR)",
					"item": [
						{
							"name": "Vendor 1 - Get Current Session/Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"vendor1_user_id\", jsonData.user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Update Profile - Capabilities",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"updateCapabilities\",\n    \"value\": [\n        \"Agile Coaching\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/users/{{vendor1_user_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"users",
										"{{vendor1_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Accept Terms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"acceptTerms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/users/{{vendor1_user_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"users",
										"{{vendor1_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Create Organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"org_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalName\": \"Real Folk\",\n    \"websiteUrl\": \"https://www.google.ca\",\n    \"streetAddress1\": \"934 Hampshire\",\n    \"city\": \"Victoria\",\n    \"region\": \"BC\",\n    \"mailCode\": \"V8Z 1T8\",\n    \"country\": \"Canada\",\n    \"contactName\": \"Andrew Sutherland\",\n    \"contactEmail\": \"sutherlanda@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/organizations",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Get Organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"org_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/organizations/{{org_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"organizations",
										"{{org_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Vendor - Deactivate Org",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"org_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/organizations/{{org_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"organizations",
										"{{org_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Invite Vendor 2 to Org",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"affiliation_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userEmail\": \"test_vendor2@email.com\",\n    \"organization\": \"{{org_id}}\",\n    \"membershipType\": \"MEMBER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/affiliations",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"affiliations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 2 - Get Current Session/Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"vendor2_user_id\", jsonData.user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 2 - Update Profile - Capabilities",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"updateCapabilities\",\n    \"value\": [\n        \"Agile Coaching\",\n        \"Backend Development\",\n        \"Delivery Management\",\n        \"DevOps Engineering\",\n        \"Frontend Development\",\n        \"Security Engineering\",\n        \"Technical Architecture\",\n        \"User Experience Design\",\n        \"User Research\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/users/{{vendor2_user_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"users",
										"{{vendor2_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 2 - Accept Invitation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/affiliations/{{affiliation_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"affiliations",
										"{{affiliation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Accept SWU Terms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"acceptSWUTerms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/organizations/{{org_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"organizations",
										"{{org_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Vendor 2 - Reject Invitation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/affiliations/{{affiliation_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"affiliations",
										"{{affiliation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Vendor 1 - Invite Vendor 3 to Org",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"affiliation_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userEmail\": \"test_vendor3@email.com\",\n    \"organization\": \"{{org_id}}\",\n    \"membershipType\": \"MEMBER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/affiliations",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"affiliations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Create SWU Proposal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"swu_proposal1_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"opportunity\": \"{{swu_opp_id}}\",\n    \"organization\": \"{{org_id}}\",\n    \"prototypePhase\": {\n    \t\"members\": [\n            {\n                \"member\": \"{{vendor1_user_id}}\",\n                \"scrumMaster\": true\n            },\n            {\n                \"member\": \"{{vendor2_user_id}}\",\n                \"scrumMaster\": false\n            }\n        ],\n        \"proposedCost\": 1\n    },\n    \"implementationPhase\": {\n        \"members\": [\n            {\n                \"member\": \"{{vendor1_user_id}}\",\n                \"scrumMaster\": true\n            },\n            {\n                \"member\": \"{{vendor2_user_id}}\",\n                \"scrumMaster\": false\n            }\n        ],\n        \"proposedCost\": 2\n    },\n    \"references\": [\n        {\n            \"name\": \"Bob Loblaw\",\n            \"company\": \"Bob Loblaw Law Firm\",\n            \"phone\": \"250-415-3480\",\n            \"email\": \"bobloblawlaw@bobloblawlawfirm.com\",\n            \"order\": 1\n        }\n    ],\n    \"teamQuestionResponses\": [\n        {\n            \"response\": \"We are the very best\",\n            \"order\": 1\n        }\n    ],\n    \"status\": \"DRAFT\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Get Proposal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"swu_proposal1_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Edit SWU Proposal Draft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"edit\",\n    \"value\": {\n    \t\"organization\": \"{{org_id}}\",\n        \"prototypePhase\": {\n            \"members\": [\n                {\n                    \"member\": \"{{vendor1_user_id}}\",\n                    \"scrumMaster\": true\n                },\n                {\n                    \"member\": \"{{vendor2_user_id}}\",\n                    \"scrumMaster\": false\n                }\n            ],\n            \"proposedCost\": 10000\n        },\n        \"implementationPhase\": {\n            \"members\": [\n                {\n                    \"member\": \"{{vendor1_user_id}}\",\n                    \"scrumMaster\": true\n                },\n                {\n                    \"member\": \"{{vendor2_user_id}}\",\n                    \"scrumMaster\": false\n                }\n            ],\n            \"proposedCost\": 400000\n        },\n        \"references\": [\n            {\n                \"name\": \"Bob Loblaw\",\n                \"company\": \"Bob Loblaw Law Firm\",\n                \"phone\": \"250-415-3480\",\n                \"email\": \"bobloblawlaw@bobloblawlawfirm.com\",\n                \"order\": 1\n            }\n        ],\n        \"teamQuestionResponses\": [\n            {\n                \"response\": \"We are the very best\",\n                \"order\": 1\n            }\n        ],\n        \"attachments\": [\n            \"{{file_id}}\"\n        ],\n        \"status\": \"DRAFT\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Vendor 1 - Delete SWU Draft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Submit SWU Proposal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"submit\",\n    \"value\": \"Submitted\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Edit SWU Proposal (Post Submit)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"edit\",\n    \"value\": {\n        \"organization\": \"{{org_id}}\",\n        \"implementationPhase\": {\n            \"members\": [\n                {\n                    \"member\": \"{{vendor1_user_id}}\",\n                    \"scrumMaster\": true\n                },\n                {\n                    \"member\": \"{{vendor2_user_id}}\",\n                    \"scrumMaster\": false\n                }\n            ],\n            \"proposedCost\": 400000\n        },\n        \"references\": [\n            {\n                \"name\": \"Bob Loblaw\",\n                \"company\": \"Bob Loblaw Law Firm\",\n                \"phone\": \"250-415-3480\",\n                \"email\": \"bobloblawlaw@bobloblawlawfirm.com\",\n                \"order\": 1\n            }\n        ],\n        \"teamQuestionResponses\": [\n            {\n                \"response\": \"We are the very bestttttttt\",\n                \"order\": 1\n            }\n        ],\n        \"attachments\": [\n            \"{{file_id}}\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Vendor 1 - Withdraw Submitted Proposal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"withdraw\",\n    \"value\": \"Withdrawn.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Create SWU Proposal (Pending Members) (Submit Immediately)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"swu_proposal1_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"opportunity\": \"{{swu_opp_id}}\",\n    \"organization\": \"{{org_id}}\",\n    \"prototypePhase\": {\n    \t\"members\": [\n            {\n                \"member\": \"{{vendor1_user_id}}\",\n                \"scrumMaster\": true\n            },\n            {\n                \"member\": \"{{vendor2_user_id}}\",\n                \"scrumMaster\": false\n            },\n            {\n            \t\"member\": \"{{vendor3_user_id}}\",\n            \t\"scrumMaster\": false\n            }\n        ],\n        \"proposedCost\": 10000\n    },\n    \"implementationPhase\": {\n        \"members\": [\n            {\n                \"member\": \"{{vendor1_user_id}}\",\n                \"scrumMaster\": true\n            },\n            {\n                \"member\": \"{{vendor2_user_id}}\",\n                \"scrumMaster\": false\n            },\n            {\n            \t\"member\": \"{{vendor3_user_id}}\",\n            \t\"scrumMaster\": false\n            }\n        ],\n        \"proposedCost\": 400000\n    },\n    \"references\": [\n        {\n            \"name\": \"Bob Loblaw\",\n            \"company\": \"Bob Loblaw Law Firm\",\n            \"phone\": \"250-415-3480\",\n            \"email\": \"bobloblawlaw@bobloblawlawfirm.com\",\n            \"order\": 1\n        }\n    ],\n    \"teamQuestionResponses\": [\n        {\n            \"response\": \"We are the very best\",\n            \"order\": 1\n        }\n    ],\n    \"attachments\": [\n        \"{{file_id}}\"\n    ],\n    \"status\": \"SUBMITTED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Deactivate Org",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"swu_proposal1_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/organizations/{{org_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"organizations",
										"{{org_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Second Proposal (VENDOR)",
					"item": [
						{
							"name": "Vendor 3 - Get Current Session/Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"vendor3_user_id\", jsonData.user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 3 - Update Profile - Capabilities",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"updateCapabilities\",\n    \"value\": [\n        \"Agile Coaching\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/users/{{vendor3_user_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"users",
										"{{vendor3_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 3 - Accept Terms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"acceptTerms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/users/{{vendor3_user_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"users",
										"{{vendor3_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 3 - Create Organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"org2_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalName\": \"Rubber Duck Software\",\n    \"websiteUrl\": \"https://www.google.ca\",\n    \"streetAddress1\": \"290 Cadillac Avenue\",\n    \"city\": \"Victoria\",\n    \"region\": \"BC\",\n    \"mailCode\": \"V8Z 1T8\",\n    \"country\": \"Canada\",\n    \"contactName\": \"Andrew Sutherland\",\n    \"contactEmail\": \"sutherlanda@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/organizations",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 3 - Invite To Organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"affiliation2_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userEmail\": \"test_vendor4@email.com\",\n    \"organization\": \"{{org2_id}}\",\n    \"membershipType\": \"MEMBER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/affiliations",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"affiliations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 4 - Accept Invitation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor4_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/affiliations/{{affiliation2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"affiliations",
										"{{affiliation2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 3 - Get Organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/organizations/{{org2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"organizations",
										"{{org2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 4 - Get Current Session/Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor4_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"vendor4_user_id\", jsonData.user.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 4 - Update Profile - Capabilities",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor4_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"updateCapabilities\",\n    \"value\": [\n        \"Agile Coaching\",\n        \"Backend Development\",\n        \"Delivery Management\",\n        \"DevOps Engineering\",\n        \"Frontend Development\",\n        \"Security Engineering\",\n        \"Technical Architecture\",\n        \"User Experience Design\",\n        \"User Research\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/users/{{vendor4_user_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"users",
										"{{vendor4_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 3 - Accept SWU Terms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"acceptSWUTerms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/organizations/{{org2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"organizations",
										"{{org2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 3 - Create SWU Proposal (Submit Immediately)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"swu_proposal2_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"opportunity\": \"{{swu_opp_id}}\",\n    \"organization\": \"{{org2_id}}\",\n    \"prototypePhase\": {\n        \"members\": [\n            {\n                \"member\": \"{{vendor3_user_id}}\",\n                \"scrumMaster\": true\n            },\n            {\n                \"member\": \"{{vendor4_user_id}}\",\n                \"scrumMaster\": false\n            }\n        ],\n        \"proposedCost\": 2\n    },\n    \"implementationPhase\": {\n        \"members\": [\n            {\n                \"member\": \"{{vendor3_user_id}}\",\n                \"scrumMaster\": true\n            },\n            {\n                \"member\": \"{{vendor4_user_id}}\",\n                \"scrumMaster\": false\n            }\n        ],\n        \"proposedCost\": 2\n    },\n    \"references\": [\n        {\n            \"name\": \"Bob Ross\",\n            \"company\": \"Feelgood Inc.\",\n            \"phone\": \"250-415-3480\",\n            \"email\": \"feelgood@email.com\",\n            \"order\": 1\n        }\n    ],\n    \"teamQuestionResponses\": [\n        {\n            \"response\": \"We will get it done fast.\",\n            \"order\": 1\n        }\n    ],\n    \"status\": \"SUBMITTED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Close and Evaluate Proposals (GOV)",
					"item": [
						{
							"name": "Gov - Get All Opportunities",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Opportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update SWU Opportunity (Change Closing Date)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"edit\",\n    \"value\": {\n        \"title\": \"SWU via POSTMAN\",\n        \"teaser\": \"Updated Sample Teaser - Edit After Publish\",\n        \"remoteOk\": true,\n        \"remoteDesc\": \"Stay back\",\n        \"location\": \"Victoria\",\n        \"totalMaxBudget\": 1000000,\n        \"minTeamMembers\": 3,\n        \"mandatorySkills\": [\n            \"foo\",\n            \"bar\"\n        ],\n        \"optionalSkills\": \"yam\",\n        \"description\": \"Sample Description Lorem Ipsum\",\n        \"proposalDeadline\": \"{{currentDate}}\",\n        \"assignmentDate\": \"2021-02-15\",\n        \"questionsWeight\": 20,\n        \"codeChallengeWeight\": 20,\n        \"scenarioWeight\": 40,\n        \"priceWeight\": 20,\n        \"implementationPhase\": {\n            \"startDate\": \"2021-02-16\",\n            \"completionDate\": \"2021-02-25\",\n            \"maxBudget\": 500000,\n            \"requiredCapabilities\": [\n                {\n                    \"capability\": \"Agile Coaching\",\n                    \"fullTime\": false\n                }\n            ]\n        },\n        \"teamQuestions\": [\n            {\n                \"question\": \"foo\",\n                \"guideline\": \"bar\",\n                \"score\": 5,\n                \"wordLimit\": 300,\n                \"order\": 1\n            }\n        ],\n        \"attachments\": [\n            \"{{file_id}}\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Anon - Get All Opportunities (Trigger SWU Hook)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Proposals For Opp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us?opportunity={{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us"
									],
									"query": [
										{
											"key": "opportunity",
											"value": "{{swu_opp_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update Proposal 1 (Questions Score)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"scoreQuestions\",\n    \"value\": {\n        \"note\": \"Submitting Vendor 1 team question scores\",\n        \"questionScores\": [\n            {\n                \"order\": 1,\n                \"score\": 4.55\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update Proposal 2 (Questions Score)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"scoreQuestions\",\n    \"value\": {\n        \"note\": \"Submitting Vendor 2 team question scores\",\n        \"questionScores\": [\n            {\n                \"order\": 1,\n                \"score\": 3\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Gov - Batch Update Proposal 1 & 2 (Questions Score)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"scoreTeamQuestions\",\n    \"value\": {\n        \"{{swu_proposal1_id}}\": {\n            \"note\": \"Submitting Vendor 2 team question scores\",\n            \"questionScores\": [\n                {\n                    \"order\": 1,\n                    \"score\": 3\n                }\n            ]\n        },\n        \"{{swu_proposal2_id}}\": {\n            \"note\": \"Submitting Vendor 1 team question scores\",\n            \"questionScores\": [\n                {\n                    \"order\": 1,\n                    \"score\": 4.55\n                }\n            ]\n        }\n        \n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update Proposal 1 (Screen In to CC)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"screenInToCodeChallenge\",\n    \"value\": \"Passed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update Proposal 2 (Screen In to CC)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"screenInToCodeChallenge\",\n    \"value\": \"Passed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update CWU Proposal 1 - Add Note Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"addNote\",\n    \"value\": {\n        \"note\": \"This is a sample note with attachments\",\n        \"attachments\": [\"{{file_id}}\", \"{{file2_id}}\"]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/code-with-us/{{cwu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"code-with-us",
										"{{cwu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Gov - Update Proposal 2 (Screen Out Of CC)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"screenOutFromCodeChallenge\",\n    \"value\": \"Screened Out\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Start Code Challenge (Update Opp)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"startCodeChallenge\",\n    \"value\": \"Code challenge started.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Proposals For Opp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us?opportunity={{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us"
									],
									"query": [
										{
											"key": "opportunity",
											"value": "{{swu_opp_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update Proposal 1 (CC Score)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"scoreCodeChallenge\",\n    \"value\": {\n        \"note\": \"Updating CC score for Vendor 1\",\n        \"score\": 75.44\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update Proposal 2 (CC Score)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"scoreCodeChallenge\",\n    \"value\": {\n        \"note\": \"Updating CC score for Vendor 2\",\n        \"score\": 73\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update Proposal 1 (Screen in to TS)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"screenInToTeamScenario\",\n    \"value\": \"Passed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update Proposal 2 (Screen in to TS)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"screenInToTeamScenario\",\n    \"value\": \"Passed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Start Team Scenario (Update Opp)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"startTeamScenario\",\n    \"value\": \"Team Scenario started.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/opportunities/sprint-with-us/{{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"opportunities",
										"sprint-with-us",
										"{{swu_opp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Proposals For Opp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us?opportunity={{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us"
									],
									"query": [
										{
											"key": "opportunity",
											"value": "{{swu_opp_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update Proposal 1 (Scenario Score)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"scoreTeamScenario\",\n    \"value\": {\n        \"note\": \"Updating TS score for Vendor 1\",\n        \"score\": 35\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Update Proposal 2 (Scenario Score)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"scoreTeamScenario\",\n    \"value\": {\n        \"note\": \"Updating TS score for Vendor 2\",\n        \"score\": 30\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(ALT) Gov - Disqualify Proposal 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"disqualify\",\n    \"value\": \"Disqualified for cheating\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal2_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Proposals For Opp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us?opportunity={{swu_opp_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us"
									],
									"query": [
										{
											"key": "opportunity",
											"value": "{{swu_opp_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Award Proposal 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"award\",\n    \"value\": \"Awarded\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Get Proposal 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Get Proposal 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/proposals/sprint-with-us/{{swu_proposal1_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"proposals",
										"sprint-with-us",
										"{{swu_proposal1_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "Admin - Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gov - Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 1 - Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 2 - Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 3 - Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor3_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendor 4 - Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();",
											"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor4_sid'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_url}}/api/sessions/current",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"sessions",
										"current"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "This collection will perform the following:\n\n- Log in an admin user, a gov user, and 4 vendors\n- Create a SWU opportunity, edit the draft and submit for review\n- Publish the SWU opportunity (admin)\n- Add an addendum to the opportunity\n- Create two vendor organizations\n- Add capabilities and accept terms to satisfy the RFQ (x 2)\n- Submit a proposal for each organization\n- Close the SWU opportunity by changing the proposal date (hook will set to EVAL)\n- Evaluate the team questions, code challenge, team scenario, price for each proposal\n- Award the proposal",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var moment = require(\"moment\");",
							"postman.setGlobalVariable(\"currentDate\", moment().subtract(1, 'd').toISOString());"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin Functions",
			"item": [
				{
					"name": "Admin - Get all users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/users",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Get all organizations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/organizations",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Get all CWU opps",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/opportunities/code-with-us",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"opportunities",
								"code-with-us"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Get all SWU opps",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/opportunities/sprint-with-us",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"opportunities",
								"sprint-with-us"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Get all SWU opps",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/opportunities/sprint-with-us",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"opportunities",
								"sprint-with-us"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Deactivate User Account (Vendor 1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/users/{{vendor1_user_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"users",
								"{{vendor1_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Reactivate User Account (Vendor 1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"tag\": \"reactivateUser\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/users/{{vendor1_user_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"users",
								"{{vendor1_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Archive Organization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/organizations/{{org_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"organizations",
								"{{org_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Create Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"content_slug\", jsonData.slug)",
									"postman.setEnvironmentVariable(\"content_id\", jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Test Content\",\n    \"body\": \"Lorem Ipsum\",\n    \"slug\": \"my-test-content3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/content",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Update Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"content_slug\", jsonData.slug)",
									"postman.setEnvironmentVariable(\"content_id\", jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Test Content - Updated Title\",\n    \"body\": \"Lorem Ipsum - Updated Body\",\n    \"slug\": \"{{content_slug}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/content/{{content_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"content",
								"{{content_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Get All Content",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/content",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Get One Content By Slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/content/{{content_slug}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"content",
								"{{content_slug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Get One Content By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/content/{{content_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"content",
								"{{content_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Delete Content",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/content/{{content_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"content",
								"{{content_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Send Notification for Updated Terms",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tag\": \"updateTerms\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/email-notifications",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"email-notifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Misc User Functions",
			"item": [
				{
					"name": "Vendor 1 - Upload Avatar Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"vendor1_avatar_id\", jsonData.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Ferret_2008.png",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "[{\"tag\": \"any\"}]",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "{{uploaded_file_path}}"
								}
							]
						},
						"url": {
							"raw": "{{api_url}}/api/avatars",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"avatars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Accept Terms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tag\": \"acceptTerms\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/users/{{vendor1_user_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"users",
								"{{vendor1_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Update Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tag\": \"updateProfile\",\n    \"value\": {\n         \"name\": \"test_vendor ONE\",\n        \"email\": \"andrew@realfolk.io\",\n        \"jobTitle\": \"\",\n        \"avatarImageFile\": \"{{vendor1_avatar_id}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/users/{{vendor1_user_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"users",
								"{{vendor1_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 2 - Accept Terms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tag\": \"acceptTerms\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/users/{{vendor2_user_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"users",
								"{{vendor2_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 2 - Update Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tag\": \"updateProfile\",\n    \"value\": {\n        \"name\": \"test_vendor TWO\",\n        \"email\": \"sudz22@outlook.com\",\n        \"jobTitle\": \"\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/users/{{vendor2_user_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"users",
								"{{vendor2_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Get Current Session/Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"admin_user_id\", jsonData.user.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/sessions/current",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"sessions",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Update Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('admin_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tag\": \"updateProfile\",\n    \"value\": {\n        \"name\": \"test_admin ADMIN\",\n        \"email\": \"asutherland@rubberducksoftware.ca\",\n        \"jobTitle\": \"\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/users/{{admin_user_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"users",
								"{{admin_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gov - Get Current Session/Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"gov_user_id\", jsonData.user.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/sessions/current",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"sessions",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gov - Update Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tag\": \"updateProfile\",\n    \"value\": {\n        \"name\": \"usagop01 GOV\",\n        \"email\": \"sutherlanda+vendor2@gmail.com\",\n        \"jobTitle\": \"\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/users/{{gov_user_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"users",
								"{{gov_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Subscribe SWU Opportunity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"opportunity\": \"{{swu_opp_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/subscribers/sprint-with-us",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"subscribers",
								"sprint-with-us"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gov - Subscribe SWU Opportunity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"opportunity\": \"{{swu_opp_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/subscribers/sprint-with-us",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"subscribers",
								"sprint-with-us"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Subscribe CWU Opportunity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"opportunity\": \"{{cwu_opp_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/subscribers/code-with-us",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"subscribers",
								"code-with-us"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gov - Subscribe CWU Opportunity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('gov_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"opportunity\": \"{{cwu_opp_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/api/subscribers/code-with-us",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"subscribers",
								"code-with-us"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Unsubscribe SWU Opportunity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/subscribers/sprint-with-us/{{swu_opp_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"subscribers",
								"sprint-with-us",
								"{{swu_opp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Get owned organizations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/ownedOrganizations",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"ownedOrganizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Get all organizations (paged)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/organizations?page=1&pageSize=2",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"organizations"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Get opportunity metrics",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/metrics",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"metrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Get all CWU proposals",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/proposals/code-with-us",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"proposals",
								"code-with-us"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Get all SWU proposals",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/proposals/sprint-with-us",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"proposals",
								"sprint-with-us"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Read Organization Affiliations for Self",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/affiliations",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"affiliations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 2 - Read Organization Affiliations for Self",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor2_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/affiliations",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"affiliations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Read Organization Affiliations For Org",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/affiliations?organization={{org_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"affiliations"
							],
							"query": [
								{
									"key": "organization",
									"value": "{{org_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Deactivate User Account (Self)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/users/{{vendor1_user_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"users",
								"{{vendor1_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Reacitvate User (Self)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.get('localhost', 'sid', function (error, value) {",
									"    pm.environment.set('vendor1_sid', value);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let tokenUrl = `${pm.environment.get('kc_proto')}://${pm.environment.get('kc_url')}/auth/realms/${pm.environment.get('realm_name')}/protocol/openid-connect/token`;",
									"let clientId = pm.environment.get('vendor_client_id');",
									"let clientSecret = pm.environment.get('vendor_client_secret');",
									"let username = pm.environment.get('test_vendor1_username');",
									"let password = pm.environment.get('test_vendor1_password');",
									"let scope = 'openid';",
									"",
									"function encode(obj) {",
									"    return Object.keys(obj).reduce((acc, cur) => {",
									"        return `${acc}${cur}=${obj[cur]}&`;",
									"    }, '');",
									"}",
									"",
									"",
									"let getTokenRequest = {",
									"    method: 'POST',",
									"    url: tokenUrl,",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: encode({",
									"            'grant_type': 'password',",
									"            'client_id': clientId,",
									"            'client_secret': clientSecret,",
									"            username,",
									"            password,",
									"            'scope': 'openid'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    const token_set = response.json();",
									"",
									"    console.log({ err, token_set });",
									"",
									"    postman.setEnvironmentVariable(\"vendor_token_set\", JSON.stringify(token_set));",
									"});",
									"",
									"const jar = pm.cookies.jar();",
									"jar.clear(pm.environment.get('api_url'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{vendor_token_set}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/auth/service",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"auth",
								"service"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Get One Content By Slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/content/{{content_slug}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"content",
								"{{content_slug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor 1 - Get One Content By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"jar.set(pm.environment.get('api_url'), 'sid', pm.environment.get('vendor1_sid'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/content/{{content_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"api",
								"content",
								"{{content_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}